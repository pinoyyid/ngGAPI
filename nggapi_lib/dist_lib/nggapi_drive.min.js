"use strict";var NgGapi;!function(a){var b=function(){function a(a,b,c,d){this.$log=a,this.$timeout=b,this.$q=c,this.HttpService=d,this.sig="DriveService",this.files={self:this,get:this.filesGet,insert:this.filesInsert,insertWithContent:this.filesInsertWithContent,list:this.filesList,update:this.filesUpdate,patch:this.filesPatch,trash:this.filesTrash,untrash:this.filesUntrash,del:this.filesDelete,watch:this.filesWatch,touch:this.filesTouch,emptyTrash:this.filesEmptyTrash},this.about={self:this,get:this.aboutGet},this.changes={self:this,get:this.changesGet,list:this.changesList,watch:this.changesWatch},this.self=this,this.resourceToken="reSource",this.urlBase="https://www.googleapis.com/drive/v2/"+this.resourceToken+"/:id",this.filesUrl=this.urlBase.replace(this.resourceToken,"files"),this.filesUploadUrl="https://www.googleapis.com/upload/drive/v2/files",this.changesUrl=this.urlBase.replace(this.resourceToken,"changes"),this.aboutUrl=this.urlBase.replace(this.resourceToken,"about"),this.urlTrashSuffix="/trash",this.urlUntrashSuffix="/untrash",this.urlWatchSuffix="/watch",this.urlTouchSuffix="/touch",this.lastFile={id:"noid"}}return a.prototype.getHttpService=function(){return this.HttpService},a.prototype.aboutGet=function(a){var b=this,c={method:"GET",url:this.self.aboutUrl.replace(":id",""),params:a},d=this.self.HttpService.doHttp(c),e={promise:d,data:{},headers:void 0};return d.then(function(a){e.headers=a.headers,b.self.transcribeProperties(a.data,e)}),e},a.prototype.changesGet=function(a){var b=this,c={method:"GET",url:this.self.changesUrl.replace(":id",""+a.changeId)},d=this.self.HttpService.doHttp(c),e={promise:d,data:{},headers:void 0};return d.then(function(a){e.headers=a.headers,b.self.transcribeProperties(a.data,e)}),e},a.prototype.changesList=function(a){a&&a.fields&&-1==a.fields.indexOf("nextPageToken")&&this.self.$log.warn('[D145] You have tried to list changes with specific fields, but forgotten to include "nextPageToken" which will crop your results to just one page.');var b={method:"GET",url:this.self.changesUrl.replace(":id",""),params:a},c=this.self.HttpService.doHttp(b),d={promise:c,data:[],headers:void 0};return c.then(function(a){if(a.data&&a.data.items)for(var b=a.data.items.length,c=0;b>c;c++)d.data.push(a.data.items[c])},void 0,function(a){for(var b=a.data.items.length,c=0;b>c;c++)d.data.push(a.data.items[c])}),d},a.prototype.changesWatch=function(a){var b=this;this.self.$log.warn("[D137] NB files.watch is not available as a CORS endpoint for browser clients.");var c={method:"POST",url:this.self.changesUrl.replace(":id","")+this.self.urlWatchSuffix,data:a},d=this.self.HttpService.doHttp(c),e={promise:d,data:void 0,headers:void 0};return d.then(function(a){e.headers=a.headers,b.self.transcribeProperties(a.data,e),b.self.lastFile=a.data}),e},a.prototype.filesGet=function(a){var b=this,c={method:"GET",url:this.self.filesUrl.replace(":id",a.fileId),params:a},d=this.self.HttpService.doHttp(c),e={promise:d,data:{},headers:void 0};return d.then(function(c){e.headers=c.headers,"media"==a.alt?e.data.media=c.data:(b.self.transcribeProperties(c.data,e),b.self.lastFile=c.data)}),e},a.prototype.filesList=function(a,b){if(a&&a.fields&&-1==a.fields.indexOf("nextPageToken")&&this.self.$log.warn('[D82] You have tried to list files with specific fields, but forgotten to include "nextPageToken" which will crop your results to just one page.'),b){var c="trashed = false";a.q=a.q?a.q+" and "+c:c}var d={method:"GET",url:this.self.filesUrl.replace(":id",""),params:a},e=this.self.HttpService.doHttp(d),f={promise:e,data:[],headers:void 0};return e.then(function(a){if(a.data&&a.data.items)for(var b=a.data.items.length,c=0;b>c;c++)f.data.push(a.data.items[c])},void 0,function(a){for(var b=a.data.items.length,c=0;b>c;c++)f.data.push(a.data.items[c])}),f},a.prototype.filesInsertWithContent=function(a,b,c,d){var e,f=this;if(!b||!b.uploadType){var g="[D314] Missing params (which must contain uploadType)";return this.self.reject(g)}if(!c){var g="[D318] Missing content";return this.self.reject(g)}try{e=this.self.buildUploadConfigObject(a,b,c,!0),e.method="POST",e.url=this.self.filesUploadUrl}catch(h){return this.self.reject(h)}var i=this.self.HttpService.doHttp(e),j={promise:i,data:{},headers:void 0};return i.then(function(b){j.headers=b.headers,(void 0==d||1==d)&&(a.id=b.data.id),f.self.transcribeProperties(b.data,j),f.self.lastFile=b.data}),j},a.prototype.filesInsert=function(a,b){var c=this,d={method:"POST",url:this.self.filesUrl.replace(":id",""),data:a},e=this.self.HttpService.doHttp(d),f={promise:e,data:{},headers:void 0};return e.then(function(d){f.headers=d.headers,(void 0==b||1==b)&&(a.id=d.data.id),c.self.transcribeProperties(d.data,f),c.self.lastFile=d.data}),f},a.prototype.filesUpdate=function(a,b,c){var d,e=this;if(b&&b.fileId)d=b.fileId;else{if(!a.id){var f="[D193] Missing fileId";return this.self.reject(f)}d=a.id}var g;if(b&&b.uploadType)try{g=this.self.buildUploadConfigObject(a,b,c,!1),g.method="PUT",g.url=this.self.filesUploadUrl+"/"+b.fileId}catch(h){return this.self.reject(h)}else g={method:"PUT",url:this.self.filesUrl.replace(":id",d),data:a};var i=this.self.HttpService.doHttp(g),j={promise:i,data:{},headers:void 0};return i.then(function(a){j.headers=a.headers,e.self.transcribeProperties(a.data,j),e.self.lastFile=a.data}),j},a.prototype.filesPatch=function(a){var b=this;if(!a||!a.fileId){var c="[D230] Missing fileId";return this.self.reject(c)}var d={method:"PATCH",url:this.self.filesUrl.replace(":id",a.fileId),data:a.resource},e=this.self.HttpService.doHttp(d),f={promise:e,data:{},headers:void 0};return e.then(function(a){f.headers=a.headers,b.self.transcribeProperties(a.data,f),b.self.lastFile=a.data}),f},a.prototype.filesTrash=function(a){var b=this;if(!a||!a.fileId){var c="[D225] Missing fileId";return this.self.reject(c)}var d={method:"POST",url:this.self.filesUrl.replace(":id",a.fileId)+this.self.urlTrashSuffix},e=this.self.HttpService.doHttp(d),f={promise:e,data:{},headers:void 0};return e.then(function(a){f.headers=a.headers,b.self.transcribeProperties(a.data,f),b.self.lastFile=a.data}),f},a.prototype.filesUntrash=function(a){var b=this;if(!a||!a.fileId){var c="[D251] Missing fileId";return this.self.reject(c)}var d={method:"POST",url:this.self.filesUrl.replace(":id",a.fileId)+this.self.urlUntrashSuffix},e=this.self.HttpService.doHttp(d),f={promise:e,data:{},headers:void 0};return e.then(function(a){f.headers=a.headers,b.self.transcribeProperties(a.data,f),b.self.lastFile=a.data}),f},a.prototype.filesDelete=function(a){if(!a||!a.fileId){var b="[D222] Missing fileId";return this.self.reject(b)}var c={method:"delete",url:this.self.filesUrl.replace(":id",a.fileId)},d=this.self.HttpService.doHttp(c),e={promise:d,data:{},headers:void 0};return d.then(function(a){e.headers=a.headers}),e},a.prototype.filesWatch=function(a,b){var c=this;if(this.self.$log.warn("[D334] NB files.watch is not available as a CORS endpoint for browser clients."),!a||!a.fileId){var d="[D302] Missing id";return this.self.reject(d)}var e={method:"POST",url:this.self.filesUrl.replace(":id",a.fileId)+this.self.urlWatchSuffix,params:a,data:b},f=this.self.HttpService.doHttp(e),g={promise:f,data:void 0,headers:void 0};return f.then(function(a){g.headers=a.headers,c.self.transcribeProperties(a.data,g),c.self.lastFile=a.data}),g},a.prototype.filesTouch=function(a){var b=this;if(!a||!a.fileId){var c="[D329] Missing fileId";return this.self.reject(c)}var d={method:"POST",url:this.self.filesUrl.replace(":id",a.fileId)+this.self.urlTouchSuffix},e=this.self.HttpService.doHttp(d),f={promise:e,data:{},headers:void 0};return e.then(function(a){f.headers=a.headers,b.self.transcribeProperties(a.data,f),b.self.lastFile=a.data}),f},a.prototype.filesEmptyTrash=function(){var a={method:"DELETE",url:this.self.filesUrl.replace(":id","trash")},b=this.self.HttpService.doHttp(a),c={promise:b,data:{},headers:void 0};return b.then(function(a){c.headers=a.headers}),c},a.prototype.reject=function(a){this.self.$log.error("NgGapi: "+a);var b=this.self.$q.defer();return b.reject(a),{data:void 0,promise:b.promise,headers:void 0}},a.prototype.buildUploadConfigObject=function(a,b,c,d){if("resumable"==b.uploadType)throw"[D136] resumable uploads are not currently supported";if(!("multipart"!=b.uploadType&&"media"!=b.uploadType||!d||a&&a.mimeType))throw"[D148] file metadata is missing mandatory mime type";var e;if("multipart"==b.uploadType){var f="-------3141592ff65358979323846",g="\r\n--"+f+"\r\n",h="";d&&(h="Content-Type: "+a.mimeType+"\r\n");var i="\r\n--"+f+"--";e=g+"Content-Type: application/json\r\n\r\n"+JSON.stringify(a)+g+h+"\r\n"+c+i;var j={};j["Content-Type"]='multipart/mixed; boundary="-------3141592ff65358979323846"'}if("media"==b.uploadType){e=c;var j={};d&&(j["Content-Type"]=a.mimeType)}return{method:void 0,url:void 0,params:b,data:e,headers:j}},a.prototype.transcribeProperties=function(a,b){b.data||(b.data={}),"object"==typeof a?Object.keys(a).map(function(c){b.data[c]=a[c]}):b=a},a.$inject=["$log","$timeout","$q","HttpService"],a}();a.DriveService=b}(NgGapi||(NgGapi={})),angular.module("ngm.NgGapi").service("DriveService",NgGapi.DriveService);